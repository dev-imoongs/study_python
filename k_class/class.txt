클래스 - 반
    공통 요소를 한 번만 선언하자!

    1. 타입이다.
        클래스 안에 선언된 변수와 메소드를 사용하고 싶다면,
        해당 클래스 타입으로 변수를 선언해야 한다.

    2. 주어이다.
        원숭이가 바나나를 먹는다.
        Monkey.eat("바나나")

클래스 선언
    class 클래스명:
        필드(변수, 메소드)

클래스의 필드 사용
    1. 객체화(instance): 객체(instance variable)를 만드는 작업, 추상적인 개념을 구체화시키는 작업
        객체명 = 생성자()
        객체명.필드명
        ※ .(마침표): 하위 연산자, 멤버변수 접근 연산자, 닷 연산자, 점 연산자
                    주소값 뒤에서만 사용이 가능하며 해당 주소를 참조(접근)하는 명령어이다.
    2. static: 모든 객체가 공유하는 필드이며, 무조건 객체가 아닌 클래스로 직접 접근할 수 있다.
        ※ 만약 static필드를 객체로 접근하면 그 필드는 그 객체에 새롭게 선언된다.
          즉, static 필드는 무조건 클래스 이름으로 접근해야 한다.
          객체로 static 필드를 접근하여 read형태로 사용할 수 있으나,
          write형태로 사용하면 self에 선언된다.

        class A:
            static_variable = 0

        print(A.static_variable)

생성자
    클래스 이름 뒤에 소괄호가 있는 형태, 메소드와 기능이 똑같지만 메소드라고 부르지 않는다.
    생성자는 리턴이라는 기능이 존재하지 않기 때문이다.

기본 생성자
    매개변수가 없는 생성자이며, 클래스 선언 시 자동으로 선언된다.
    사용자가 직접 생성자를 선언하게 되면 자동으로 선언되지 않는다.

self
    필드에 접근한 객체가 누구인지 알아야 해당 필드에 접근할 수 있다.
    이 때 접근한 객체가 가지고 있는 필드의 주소값이 self라는 변수에 자동으로 담긴다.





