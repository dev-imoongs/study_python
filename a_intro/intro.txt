Python - 프로그래밍 언어

컴퓨터와 소통하기 위해 사용하는 언어이며,
간결한 문법과 빠른 연산속도 등의 다양한 장점을 가지고 있어서 인기 있는 언어이다.
GUI 개발, 웹 개발, 데이터 분석, AI 등에 사용한다.

소스코드
    명령어를 작성해 놓은 것
    개발자와 컴퓨터가 소통할 것을 글로 작성해 놓은 것

소스파일
    소스코드가 작성되어 있는 파일

컴파일
    사람의 언어를 컴퓨터 언어로 바꿔주는 작업
    실행되는 프로그램에 따라 컴파일 작업의 유무가 결정된다

컴파일러
    소스코드 -> 컴파일러 -> 기계어 -> 운영체제 -> 하드웨어
    컴파일을 해주는 프로그램 또는 명령어
    코드 수정 후 실행할 때 전체 컴파일 진행
    일괄 처리이기 때문에 실행 속도 비교적 빠름
    번역 파일이 생성되며, 실제 소스코드가 유출될 수 없음

인터프리터
    소스코드 -> 인터프리터 -> 운영체제 -> 하드웨어
    인터프리트를 해주는 프로그램 또는 명령어
    코드 수정 후 바로 한 줄 씩 실행
    개별 처리이기 때문에 실행 속도 비교적 느림
    번역 파일이 없으며, 실제 소스코드가 그대로 유출될 수 있음

    ※ 파이썬은 인터프리터 안에 컴파일러를 내장하고 있다.
      인터프리터처럼 매번 소스코드를 한 줄 씩 해석해서 실행해야 한다면,
      이 해석 작업 때문에 전체 프로그램의 퍼포먼스에서 크게 손해를 보기 때문에
      파이썬은 소스코드를 바이트 코드로 검파일 한 뒤
      이를 번역기가 돌려주는 방식으로 실행된다.
      따라서 컴파일 언어인지, 인터프리터 언어인지를 구분하는 것이 아니라
      어떻게 구현하였는 지로 판단해야 한다.

프로그램 - 소스코드로 잘 짜여진 틀

1. 일반 프로그램

    프로그램
    OS(운영체제): 하드웨어에 적절한 전기신호를 흘려주는 역할.
    하드웨어

    - 일반 프로그램은 이식성이 좋지 않다.

2. Python 프로그램

    프로그램
    PVM: Python 프로그램을 OS에 맞게 번역한다.
    OS
    하드웨어

    - Python 프로그램은 이식성이 좋다.

콘솔 - 하드웨어
    개발자가 내 컴퓨터(로컬)와 직접 소통할 수 있는 입출력장치(입력: 키보드, 출력: 모니터).

터미널 - 소프트웨어
    내 컴퓨터(로컬)뿐만 아니라 다른 컴퓨터에 원격으로도 접속할 수 있는 콘솔을 구현한 프로그램.

쉘
    명령어 해석기.

정리
    1. 개발자가 터미널에 명령어 입력
    2. 쉘이 명령어를 받은 뒤 해석 및 수행
    3. 터미널은 쉘에게 받은 결과를 화면에 출력


















